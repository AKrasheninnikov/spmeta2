<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="/" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(ProjectDir)_3rd party\ClosedXML\ClosedXml.dll" #>
<#@ assembly name="$(ProjectDir)_3rd party\ClosedXML\DocumentFormat.OpenXml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="ClosedXML" #>
<#@ import namespace="ClosedXML.Excel" #><#+

    public class ExcelDefinitionContext
    {
        public XLWorkbook CurrentBook { get;set; }
        public IXLWorksheet CurrentSheet { get;set; }
        public IXLRow CurrentRow { get;set; }
    }

    public Dictionary<string, Func<ExcelDefinitionContext, string>> artifactHandlers = new Dictionary<string, Func<ExcelDefinitionContext, string>>();
    public Dictionary<string, string> artifactListNames = new Dictionary<string, string>();

    string LookupParentContentTypeId(ExcelDefinitionContext context, string parentContentTypeName) {

        var rows = context.CurrentSheet.Rows();
		var rowsCount = rows.Count();
		
		for(var rowIndex = 2; rowIndex < rowsCount+1; rowIndex++)
        {
            var currentRow = context.CurrentSheet.Row(rowIndex);
            var name = currentRow.Cell("A").Value.ToString();

            if(name == parentContentTypeName) {
                var id = currentRow.Cell("F").Value.ToString();
                var pId = currentRow.Cell("C").Value.ToString();;

                // ah, how dirty it is :)
                // "using SPMeta2.Syntax.Default;" is required
                return name.Replace(" ", string.Empty) + ".GetContentTypeId()";
            }
        }
    
        return string.Empty;

    }

    void InitHandlers() {
    
        if(artifactHandlers.Count != 0) return;

        artifactListNames.Add("SPField","Fields");
        artifactListNames.Add("SPContentType","Content Types");

        artifactListNames.Add("SPList","Lists");
        artifactListNames.Add("SPListView","List Views");
        
        artifactListNames.Add("SPWeb","Webs");
        artifactListNames.Add("SPQuickLaunchNavigation","Quick Launch Navigation");
        artifactListNames.Add("SPUserCustomAction", "User Custom Actions");

        artifactListNames.Add("SPWebpart","Webparts");
        
        artifactListNames.Add("SPWebpartPage","Webpart Pages");
        artifactListNames.Add("SPWikiPage","Wiki Pages");

        artifactListNames.Add("SPSecurityGroup","Security Groups");
        artifactListNames.Add("SPSecurityRole","Security Roles");
        
        artifactHandlers.Add("SPUserCustomAction", (context) => {

            var currentRow = context.CurrentRow;

            var name = currentRow.Cell("A").Value.ToString();
			var title = currentRow.Cell("B").Value.ToString();
			var description = currentRow.Cell("C").Value.ToString();
            
            var scriptSrc = currentRow.Cell("D").Value.ToString();
            var scriptBlock = currentRow.Cell("E").Value.ToString();

            var actionGroup = currentRow.Cell("F").Value.ToString();
            var actionLocation = currentRow.Cell("G").Value.ToString();

            var sequence = currentRow.Cell("H").Value.ToString();
            var sequenceValue = 100;

            if(!string.IsNullOrEmpty(sequence))
                sequenceValue = int.Parse(sequence);

			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static UserCustomActionDefinition {0} = new UserCustomActionDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Name = \"{0}\",{1}", name, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}Description = \"{0}\",{1}", description, Environment.NewLine, tabSymbol);

                fieldTemplate.AppendFormat("{2}{2}{2}ScriptSrc = \"{0}\",{1}", scriptSrc, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}ScriptBlock = \"{0}\",{1}", scriptBlock, Environment.NewLine, tabSymbol);

                fieldTemplate.AppendFormat("{2}{2}{2}Group = \"{0}\",{1}", actionGroup, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}Location = \"{0}\",{1}", actionLocation, Environment.NewLine, tabSymbol);

                fieldTemplate.AppendFormat("{2}{2}{2}Sequence = {0},{1}", sequenceValue, Environment.NewLine, tabSymbol);
			
                fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();

        });

           // list views
        artifactHandlers.Add("SPWikiPage", (context) => {
            
             var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var fileName = currentRow.Cell("B").Value.ToString();
			var needOverride = currentRow.Cell("C").Value.ToString();
			
            var needOverrideValue = true;
            var needOverrideValueTmp = true;

            if(bool.TryParse(needOverride, out needOverrideValueTmp))
                needOverrideValue = needOverrideValueTmp;

			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static WikiPageDefinition {0} = new WikiPageDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}FileName = \"{0}\",{1}", fileName, Environment.NewLine, tabSymbol);

                fieldTemplate.AppendFormat("{2}{2}{2}NeedOverride = {0},{1}", needOverrideValue.ToString().ToLower(), Environment.NewLine, tabSymbol);
			
                fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();
            

        });
        
         // list views
        artifactHandlers.Add("SPSecurityGroup", (context) => {

             var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var description = currentRow.Cell("B").Value.ToString();
			var permissions = currentRow.Cell("C").Value.ToString();

			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static SecurityGroupDefinition {0} = new SecurityGroupDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Name = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}Description = \"{0}\",{1}", description, Environment.NewLine, tabSymbol);
				
			    fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();

        });

        // list views
        artifactHandlers.Add("SPSecurityRole", (context) => {

            var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var description = currentRow.Cell("B").Value.ToString();
			var permissions = currentRow.Cell("C").Value.ToString();

			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static SecurityRoleDefinition {0} = new SecurityRoleDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Name = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}Description = \"{0}\",{1}", description, Environment.NewLine, tabSymbol);
				
			    fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();

        });
        
        // list views
        artifactHandlers.Add("SPWebpartPage", (context) => {

         var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var fileName = currentRow.Cell("B").Value.ToString();
			var needOverride = currentRow.Cell("C").Value.ToString();
			
            var needOverrideValue = true;
            var needOverrideValueTmp = true;

            if(bool.TryParse(needOverride, out needOverrideValueTmp))
                needOverrideValue = needOverrideValueTmp;

            var pageLayoutTemplate = currentRow.Cell("D").Value.ToString();
            var customPageLayout = currentRow.Cell("E").Value.ToString();

			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static WebPartPageDefinition {0} = new WebPartPageDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}FileName = \"{0}\",{1}", fileName, Environment.NewLine, tabSymbol);

                fieldTemplate.AppendFormat("{2}{2}{2}NeedOverride = {0},{1}", needOverrideValue.ToString().ToLower(), Environment.NewLine, tabSymbol);
                
                if(!string.IsNullOrEmpty(pageLayoutTemplate))
                    fieldTemplate.AppendFormat("{2}{2}{2}PageLayoutTemplate = {0},{1}", pageLayoutTemplate, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}CustomPageLayout = \"{0}\",{1}", customPageLayout, Environment.NewLine, tabSymbol);
				
			    fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();


        });


        // list views
        artifactHandlers.Add("SPWebpart", (context) => {

             var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var id = currentRow.Cell("B").Value.ToString();
			var zoneId = currentRow.Cell("C").Value.ToString();
			var zoneIndex = currentRow.Cell("D").Value.ToString();
            
            var webpartFileName	 = currentRow.Cell("E").Value.ToString();
            var webpartType = currentRow.Cell("F").Value.ToString();
            var webpartXmlTemplate = currentRow.Cell("G").Value.ToString();
			
            webpartXmlTemplate = webpartXmlTemplate.Replace("\"","\\\"");
            //webpartXmlTemplate = webpartXmlTemplate.Replace(Environment.NewLine, "\" + "); 
            webpartXmlTemplate = webpartXmlTemplate.Replace("\n", string.Empty); 

			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static WebPartDefinition {0} = new WebPartDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}Id = \"{0}\",{1}", id, Environment.NewLine, tabSymbol);

                fieldTemplate.AppendFormat("{2}{2}{2}ZoneId = \"{0}\",{1}", zoneId, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}ZoneIndex = {0},{1}", zoneIndex, Environment.NewLine, tabSymbol);

                fieldTemplate.AppendFormat("{2}{2}{2}WebpartFileName = \"{0}\",{1}", webpartFileName, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}WebpartType = \"{0}\",{1}", webpartType, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}WebpartXmlTemplate = \"{0}\",{1}", webpartXmlTemplate, Environment.NewLine, tabSymbol);
				
			    fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();

        });

        // list views
        artifactHandlers.Add("SPListView", (context) => {

             var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var rowLimit = currentRow.Cell("B").Value.ToString();
			var isDefault = currentRow.Cell("C").Value.ToString();
			var isPaged = currentRow.Cell("D").Value.ToString();
            var query = currentRow.Cell("E").Value.ToString();
            var fields = currentRow.Cell("F").Value.ToString();
			
			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

            var isDefaultValue = true;
            var isDefaultValueTmp = true;

            if(bool.TryParse(isDefault, out isDefaultValueTmp))
                isDefaultValue = isDefaultValueTmp;

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static ListViewDefinition {0} = new ListViewDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}RowLimit = {0},{1}", rowLimit, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}IsDefault = {0},{1}", isDefaultValue.ToString().ToLower(), Environment.NewLine, tabSymbol);

                fieldTemplate.AppendFormat("{2}{2}{2}Query = \"{0}\",{1}", query, Environment.NewLine, tabSymbol);
                //fieldTemplate.AppendFormat("{2}{2}{2}Fields = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
				
			    fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();

        });

        // webs
        artifactHandlers.Add("SPWeb", (context) => {

             var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var description = currentRow.Cell("B").Value.ToString();
			var url = currentRow.Cell("C").Value.ToString();
			var webTemplate = currentRow.Cell("D").Value.ToString();
			
			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static WebDefinition {0} = new WebDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
				
				if(string.IsNullOrEmpty(description))
					fieldTemplate.AppendFormat("{2}{2}{2}Description = String.Empty,{1}", description, Environment.NewLine, tabSymbol);
				else 
					fieldTemplate.AppendFormat("{2}{2}{2}Description = \"{0}\",{1}", description, Environment.NewLine, tabSymbol);
				
                fieldTemplate.AppendFormat("{2}{2}{2}WebTemplate = \"{0}\",{1}", webTemplate, Environment.NewLine, tabSymbol);
				fieldTemplate.AppendFormat("{2}{2}{2}Url = \"{0}\",{1}", url, Environment.NewLine, tabSymbol);

			    fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();

        });

        // fields
        artifactHandlers.Add("SPField", (context) => {

             var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var description = currentRow.Cell("B").Value.ToString();
			var fieldType = currentRow.Cell("C").Value.ToString();
			var group = currentRow.Cell("D").Value.ToString();
			var internalName = currentRow.Cell("E").Value.ToString();
			var id = currentRow.Cell("F").Value.ToString();    

            if(string.IsNullOrEmpty(title)) return string.Empty;

            var template = new List<string>();
 
            var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static FieldDefinition {0} = new FieldDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Id = new Guid(\"{{{0}}}\"),{1}", id, Environment.NewLine, tabSymbol);
				fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
				fieldTemplate.AppendFormat("{2}{2}{2}InternalName = \"{0}\",{1}", internalName, Environment.NewLine, tabSymbol);
				
				if(string.IsNullOrEmpty(description))
					fieldTemplate.AppendFormat("{2}{2}{2}Description = String.Empty,{1}", description, Environment.NewLine, tabSymbol);
				else 
					fieldTemplate.AppendFormat("{2}{2}{2}Description = \"{0}\",{1}", description, Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Group = \"{0}\",{1}", group, Environment.NewLine, tabSymbol);
				fieldTemplate.AppendFormat("{2}{2}{2}FieldType = BuiltInFieldTypes.{0}{1}", fieldType, Environment.NewLine, tabSymbol);

			fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();

        });

         // quicl launch navigation
        artifactHandlers.Add("SPQuickLaunchNavigation", (context) => {
             
    var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var isVisible = currentRow.Cell("B").Value.ToString();
			var isExternal = currentRow.Cell("C").Value.ToString();
			var url = currentRow.Cell("D").Value.ToString();
			
            var isVisibleValue = true;

			if(!string.IsNullOrEmpty(isVisible))
			{
                var isVisibleTmpValue = false;
				if(bool.TryParse(isVisible, out isVisibleTmpValue))
					isVisibleValue = isVisibleTmpValue;
			}

            var isExternalValue = true;

			if(!string.IsNullOrEmpty(isExternal))
			{
                var isExternalTmpValue = false;
				if(bool.TryParse(isVisible, out isExternalTmpValue))
					isExternalValue = isExternalTmpValue;
			}

			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static QuickLaunchNavigationNodeDefinition {0} = new QuickLaunchNavigationNodeDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}IsVisible = {0},{1}", isVisibleValue.ToString().ToLower(), Environment.NewLine, tabSymbol);
                fieldTemplate.AppendFormat("{2}{2}{2}IsExternal = {0},{1}", isExternalValue.ToString().ToLower(), Environment.NewLine, tabSymbol);
				fieldTemplate.AppendFormat("{2}{2}{2}Url = \"{0}\",{1}", url, Environment.NewLine, tabSymbol);

			    fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();

        });

        // content types
        artifactHandlers.Add("SPContentType", (context) => {
            
            var currentRow = context.CurrentRow;

            var name = currentRow.Cell("A").Value.ToString();
			var description = currentRow.Cell("B").Value.ToString();
			
            var parentContentTypeId = currentRow.Cell("C").Value.ToString();
            var parentContentTypeRef = currentRow.Cell("D").Value.ToString();
			
            var group = currentRow.Cell("E").Value.ToString();
			var id = currentRow.Cell("F").Value.ToString();
            var parentContentTypeRefIdValue = string.Empty;

            if(!string.IsNullOrEmpty(parentContentTypeRef)){
                parentContentTypeRefIdValue = LookupParentContentTypeId(context , parentContentTypeRef);;
            }

            if(string.IsNullOrEmpty(name)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static ContentTypeDefinition {0} = new ContentTypeDefinition{1}", 
				new string [] {
					name.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Id = new Guid(\"{{{0}}}\"),{1}", id, Environment.NewLine, tabSymbol);
				fieldTemplate.AppendFormat("{2}{2}{2}Name = \"{0}\",{1}", name, Environment.NewLine, tabSymbol);
				
				if(string.IsNullOrEmpty(description))
					fieldTemplate.AppendFormat("{2}{2}{2}Description = String.Empty,{1}", description, Environment.NewLine, tabSymbol);
				else 
					fieldTemplate.AppendFormat("{2}{2}{2}Description = \"{0}\",{1}", description, Environment.NewLine, tabSymbol);
				
				fieldTemplate.AppendFormat("{2}{2}{2}Group = \"{0}\",{1}", group, Environment.NewLine, tabSymbol);
				 
            if(!string.IsNullOrEmpty(parentContentTypeRef)){
                fieldTemplate.AppendFormat("{2}{2}{2}ParentContentTypeId = {0}{1}", parentContentTypeRefIdValue, Environment.NewLine, tabSymbol);
            } else {
                fieldTemplate.AppendFormat("{2}{2}{2}ParentContentTypeId = BuiltInContentTypeId.{0}{1}", parentContentTypeId, Environment.NewLine, tabSymbol);
            }

			fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();
        });

        // content types
        artifactHandlers.Add("SPList", (context) => {
            
 var currentRow = context.CurrentRow;

            var title = currentRow.Cell("A").Value.ToString();
			var description = currentRow.Cell("B").Value.ToString();
			var url = currentRow.Cell("C").Value.ToString();
			var templateType = currentRow.Cell("D").Value.ToString();
			var templateName = currentRow.Cell("E").Value.ToString();
			var contentTypesEnabled = currentRow.Cell("F").Value.ToString();
			
			var contentTypesEnableValue = true;
			var tmpContentTypesEnableValue = true;

			if(!string.IsNullOrEmpty(contentTypesEnabled))
			{
				if(bool.TryParse(contentTypesEnabled, out tmpContentTypesEnableValue))
					contentTypesEnableValue = tmpContentTypesEnableValue;
			}
			
			if(string.IsNullOrEmpty(title)) return string.Empty;
		
			var fieldTemplate = new System.Text.StringBuilder();
			var tabSymbol = "\t";

			fieldTemplate.AppendFormat("{0}",Environment.NewLine);
			fieldTemplate.AppendFormat("{2}{2}public static ListDefinition {0} = new ListDefinition{1}", 
				new string [] {
					title.Replace(" ", ""), 
					Environment.NewLine,
					tabSymbol
				});

			fieldTemplate.AppendFormat("{1}{1}{{{0}", Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}Title = \"{0}\",{1}", title, Environment.NewLine, tabSymbol);
				
				if(string.IsNullOrEmpty(description))
					fieldTemplate.AppendFormat("{2}{2}{2}Description = String.Empty,{1}", description, Environment.NewLine, tabSymbol);
				else 
					fieldTemplate.AppendFormat("{2}{2}{2}Description = \"{0}\",{1}", description, Environment.NewLine, tabSymbol);
				
				fieldTemplate.AppendFormat("{2}{2}{2}Url = \"{0}\",{1}", url, Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}TemplateType = BuiltInListTemplateTypeId.{0},{1}", templateType, Environment.NewLine, tabSymbol);
				
				if(string.IsNullOrEmpty(templateName))
					fieldTemplate.AppendFormat("{2}{2}{2}TemplateName = String.Empty,{1}", templateName, Environment.NewLine, tabSymbol);
				else
					fieldTemplate.AppendFormat("{2}{2}{2}TemplateName = \"{0}\",{1}", templateName, Environment.NewLine, tabSymbol);

				fieldTemplate.AppendFormat("{2}{2}{2}ContentTypesEnabled = {0}{1}", contentTypesEnableValue.ToString().ToLower(), Environment.NewLine, tabSymbol);

			fieldTemplate.AppendFormat("{1}{1}}};{0}",Environment.NewLine, tabSymbol);

            return fieldTemplate.ToString();
        });
    }

    string SPMeta2FieldsTemplate() {
        
        var res = new List<string>();

        res.Add("namespace #NAMESPACE#");
        res.Add("{");
        res.Add("       public static class #CLASS_NAME_PREFIX#Fields");
        res.Add("       {");
        res.Add("           #region properties");
        res.Add("           #SPMETA_ARTIFACTS#");
        res.Add("           #endregion");
        res.Add("       }");
        res.Add("}");

        return string.Join(Environment.NewLine, res.ToArray());
    }
#>