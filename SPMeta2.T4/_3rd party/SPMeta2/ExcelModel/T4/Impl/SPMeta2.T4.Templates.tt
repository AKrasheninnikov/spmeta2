<#@ template language="C#" hostspecific="True" #>
<#@ output extension="/" #><#+
    
     string GetTemplateDefaultUsing() {
        
        var result = new List<string>();

        result.Add("using System;");
        result.Add("using SPMeta2.Definitions;");
        result.Add("using SPMeta2.Enumerations;");
        result.Add("using SPMeta2.Syntax.Default;");
        result.Add(Environment.NewLine);
        
        return string.Join(Environment.NewLine, result.ToArray());
    }
  
    string GetTemplateDefaultWarning() {
        
        var result = new List<string>();

        result.Add("// <auto-generated>");
        result.Add("//     This code was generated by SPMeta2 T4 file.");
        result.Add("//");
        result.Add("//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
        result.Add("// </auto-generated>");
        result.Add(Environment.NewLine);

        return string.Join(Environment.NewLine, result.ToArray());
    }

    string GetTemplateDefaultClassByTemplateName(string templateName) {
        
        InitHandlers();

        var res = new List<string>();

        var classPrefix = GetSPMeta2DictSetting("Field class prefix", "T4Generated_");
        var classContent = GetSPMeta2ClassContent(templateName);

        res.Add("namespace " + GetCurrentNamespace());
        res.Add("{");
        res.Add("    public static class " + classPrefix + templateName);
        res.Add("    {");
        res.Add("        #region properties");
        res.Add(classContent);
        res.Add("        #endregion");
        res.Add("    }");
        res.Add("}");
        
        return string.Join(Environment.NewLine, res.ToArray());
    }

    string GetSPMeta2ClassContent(string templateName) {
        
        var result = new List<string>();

        var workbook = new XLWorkbook(GetSPMetaModelFilePath());
		var fieldSheet = workbook.Worksheet(artifactListNames[templateName]);
		
		var rows = fieldSheet.Rows();
		var rowsCount = fieldSheet.Rows().Count();
		
		for(var rowIndex = 2; rowIndex < rowsCount+1; rowIndex++)
        {
              var currentRow = fieldSheet.Row(rowIndex);

            var currentContext = new ExcelDefinitionContext {
                    CurrentBook = workbook,
                    CurrentSheet = fieldSheet,
                    CurrentRow = currentRow
            };
           
            result.Add(artifactHandlers[templateName](currentContext));
        }

        return string.Join(Environment.NewLine, result.ToArray());
    }

    void GenerateSPMeta2Template(string templateName) {
        
        var result = new System.Text.StringBuilder();

        result.Append(GetTemplateDefaultUsing());
        result.Append(GetTemplateDefaultWarning());
        
        var classContent = GetTemplateDefaultClassByTemplateName(templateName);
        result.Append(classContent);

        Write(result.ToString());
    }


#>