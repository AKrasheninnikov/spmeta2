//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using SPMeta2.BuiltInDefinitions;
using SPMeta2.Containers;
using SPMeta2.Containers.Standard;
using SPMeta2.Definitions;
using SPMeta2.Definitions.Base;
using SPMeta2.Definitions.Webparts;
using SPMeta2.Regression.Tests.Impl.Scenarios.Base;
using SPMeta2.Standard.Services.Webparts;
using SPMeta2.Syntax.Default;
using SPMeta2.Standard.Definitions.Webparts;
using SPMeta2.Enumerations;
using SPMeta2.Regression.Definitions;
using SPMeta2.Standard.Definitions;
using SPMeta2.Standard.Enumerations;
using SPMeta2.Containers.Extensions;

namespace SPMeta2.Regression.Tests.Impl.DefnitionCoverage
{
    [TestClass]
    public class WebpartDefinitionCoverageTest : SPMeta2RegresionScenarioTestBase
    {
        #region internal

        [ClassInitializeAttribute]
        public static void Init(TestContext context)
        {
            InternalInit();
        }

        [ClassCleanupAttribute]
        public static void Cleanup()
        {
            InternalCleanup();
        }

        #endregion

        #region pre-generated tests
 
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_WebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(WebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<WebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_PageViewerWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(PageViewerWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<PageViewerWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_SilverlightWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(SilverlightWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<SilverlightWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_UserCodeWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(UserCodeWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<UserCodeWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ClientWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ClientWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ClientWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ScriptEditorWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ScriptEditorWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ScriptEditorWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ContentEditorWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ContentEditorWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ContentEditorWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ListViewWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ListViewWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ListViewWebPartDefinition>(false);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_XsltListViewWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(XsltListViewWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<XsltListViewWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ProjectSummaryWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ProjectSummaryWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ProjectSummaryWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_RefinementScriptWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(RefinementScriptWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<RefinementScriptWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ContactFieldControlDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ContactFieldControlDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ContactFieldControlDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ContentBySearchWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ContentBySearchWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ContentBySearchWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ContentByQueryWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ContentByQueryWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ContentByQueryWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_ResultScriptWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(ResultScriptWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<ResultScriptWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_SiteFeedWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(SiteFeedWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<SiteFeedWebPartDefinition>(useSubweb);
        }
		
		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_SummaryLinkWebPartDefinition_To_AllPageTypes() 
        {
			var currenType = typeof(SummaryLinkWebPartDefinition);
			var useSubweb = !(currenType is ClientWebPartDefinition);

            DeployWebpartOnSupportedHosts<SummaryLinkWebPartDefinition>(useSubweb);
        }
		       
	    #endregion

       #region utils

        private void DeployWebpartOnSupportedHosts<TWebpartType>()
            where TWebpartType : WebPartDefinitionBase
        {
            DeployWebpartOnSupportedHosts<TWebpartType>(false);
        }

        private void DeployWebpartOnSupportedHosts<TWebpartType>(bool useSubweb)
            where TWebpartType : WebPartDefinitionBase
        {
            var initialDef = ModelGeneratorService.GetRandomDefinition(typeof(TWebpartType)) as TWebpartType;

            var wikiWebPartDef = initialDef.Clone<TWebpartType>();
            var webpartPageWebPartDef = initialDef.Clone<TWebpartType>();
            var publishingPageWebPartDef = initialDef.Clone<TWebpartType>();

            var listFormWebPartDef = initialDef.Clone<TWebpartType>();
            var documentLibraryFormWebPartDef = initialDef.Clone<TWebpartType>();

            var siteModel = SPMeta2Model.NewSiteModel(site =>
            {
                site.AddSiteFeature(BuiltInSiteFeatures.SharePointServerPublishingInfrastructure.Inherit(def =>
                {
                    def.Enable = true;
                }));
            });

            var model = SPMeta2Model.NewWebModel(web =>
            {
                var currentWeb = web;

                if (useSubweb)
                {
                    web.AddRandomWeb(subWeb =>
                    {
                        currentWeb = subWeb;
                    });
                }

				// ensure for the client web part
                currentWeb.AddRandomApp();

                currentWeb
                    .AddWebFeature(BuiltInWebFeatures.SharePointServerPublishing.Inherit(def =>
                    {
                        def.Enable = true;
                    }))
                    // to web part and wiki pages
                   .AddHostList(BuiltInListDefinitions.SitePages, list =>
                   {
                       var webpartPageName = string.Empty;
                       var wikiPageName = string.Empty;

                       list
                           .AddRandomWebPartPage(page =>
                           {
                               webpartPageName = (page.Value as WebPartPageDefinition).FileName;
                               page.AddDefinitionNode(webpartPageWebPartDef);
                           })
                           .AddRandomWikiPage(page =>
                           {
                               wikiPageName = (page.Value as WikiPageDefinition).FileName;
                               page.AddDefinitionNode(wikiWebPartDef);
                           });

                       list.AddDefinitionNode(new WebpartPresenceOnPageDefinition
                       {
                           PageFileName = webpartPageName,
                           WebPartDefinitions = new List<WebPartDefinitionBase>(new WebPartDefinitionBase[]
                                    {
                                            webpartPageWebPartDef,
                                    })
                       }, def =>
                       {
                           def.RegExcludeFromEventsValidation();
                       });

                       list.AddDefinitionNode(new WebpartPresenceOnPageDefinition
                       {
                           PageFileName = wikiPageName,
                           WebPartDefinitions = new List<WebPartDefinitionBase>(new WebPartDefinitionBase[]
                                    {
                                            wikiWebPartDef,
                                    })
                       }, def =>
                       {
                           def.RegExcludeFromEventsValidation();
                       });
                   })
                    // to publishing pages
                   .AddHostList(BuiltInListDefinitions.Pages, list =>
                   {
                       var publishingPageName = string.Empty;

                       list
                           .AddRandomPublishingPage(page =>
                           {
                               (page.Value as PublishingPageDefinition).PageLayoutFileName =
                                   BuiltInPublishingPageLayoutNames.BlankWebPartPage;

                               publishingPageName = (page.Value as PublishingPageDefinition).FileName;

                               page.AddDefinitionNode(publishingPageWebPartDef);
                           });

                       list.AddDefinitionNode(new WebpartPresenceOnPageDefinition
                       {
                           PageFileName = publishingPageName,
                           WebPartDefinitions = new List<WebPartDefinitionBase>(new WebPartDefinitionBase[]
                                    {
                                            publishingPageWebPartDef,
                                    })
                       }, def =>
                       {
                           def.RegExcludeFromEventsValidation();
                       });
                   })
                    // to list form
                    .AddRandomList(list =>
                    {
                        list.AddHostWebPartPage(new WebPartPageDefinition
                        {
                            FileName = "AllItems.aspx",
                            PageLayoutTemplate = BuiltInWebPartPageTemplates.spstd1,
                            NeedOverride = false
                        }, page =>
                        {
                            page.AddDefinitionNode(listFormWebPartDef);
                        });
                    })

                    // to document form
                    .AddRandomDocumentLibrary(list =>
                    {
                        list.AddHostFolder(BuiltInFolderDefinitions.Forms, folder =>
                        {
                            folder.AddHostWebPartPage(new WebPartPageDefinition
                            {
                                FileName = "AllItems.aspx",
                                PageLayoutTemplate = BuiltInWebPartPageTemplates.spstd1,
                                NeedOverride = false
                            }, page =>
                            {
                                page.AddDefinitionNode(documentLibraryFormWebPartDef);
                            });
                        });
                    });
            });

            TestModel(siteModel, model);
        }

        #endregion
    }

}
