<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)bin\Debug\SPMeta2.dll" #>
<#@ assembly name="$(ProjectDir)bin\Debug\SPMeta2.Standard.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="SPMeta2.Utils" #>
<#@ import namespace="SPMeta2.Definitions" #>
<#@ import namespace="SPMeta2.Standard.Definitions.Taxonomy" #>
<#@ import namespace="SPMeta2.Standard.Definitions.Fields" #>
<#@ import namespace="SPMeta2.Definitions.Base" #>
<#@ import namespace="SPMeta2.Definitions.Webparts" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SPMeta2.BuiltInDefinitions;
using SPMeta2.Containers;
using SPMeta2.Containers.Standard;
using SPMeta2.Definitions;
using SPMeta2.Definitions.Base;
using SPMeta2.Definitions.Webparts;
using SPMeta2.Regression.Tests.Impl.Scenarios.Base;
using SPMeta2.Standard.Services.Webparts;
using SPMeta2.Syntax.Default;
using SPMeta2.Standard.Definitions.Webparts;
using SPMeta2.Enumerations;

namespace SPMeta2.Regression.Tests.Impl.DefnitionCoverage
{
    [TestClass]
    public class WebpartDefinitionCoverageTest : SPMeta2RegresionScenarioTestBase
    {
        #region internal

        [ClassInitializeAttribute]
        public static void Init(TestContext context)
        {
            InternalInit();
        }

        [ClassCleanupAttribute]
        public static void Cleanup()
        {
            InternalCleanup();
        }

        #endregion

        #region pre-generated tests
 <#

	var allDefinitions = ReflectionUtils.GetTypesFromAssemblies<DefinitionBase>(new[]
            {
                typeof(DefinitionBase).Assembly,
				typeof(TaxonomyFieldDefinition).Assembly
            });

	foreach(var definitionType in allDefinitions.Where(t => t.IsSubclassOf(typeof(WebPartDefinitionBase))) ) {
		
		#>

		[TestMethod]
        [TestCategory("Regression.DefnitionCoverage.WebpartDefinitions")]
        public void CanDeploy_<# Write(definitionType.Name); #>_To_AllPageTypes() 
        {
            DeployWebpartOnSupportedHosts<<# Write(definitionType.Name); #>>();
        }
		<#
	}
 #>
       
	    #endregion

        #region utils

		private void DeployWebpartOnSupportedHosts<TWebpartType>()
            where TWebpartType : WebPartDefinitionBase
        {
            var initialDef = ModelGeneratorService.GetRandomDefinition(typeof(TWebpartType)) as TWebpartType;

            var wikiWebPartDef = initialDef.Clone<TWebpartType>();
            var webpartPageWebPartDef = initialDef.Clone<TWebpartType>();
            var publishingPageWebPartDef = initialDef.Clone<TWebpartType>();

            var listFormWebPartDef = initialDef.Clone<TWebpartType>();
            var documentLibraryFormWebPartDef = initialDef.Clone<TWebpartType>();

            var model = SPMeta2Model
                .NewWebModel(web =>
                {
                    web
                        // to web part and wiki pages
                        .AddHostList(BuiltInListDefinitions.SitePages, list =>
                        {
                            list
                                .AddRandomWebPartPage(page =>
                                {
                                    page.AddDefinitionNode(webpartPageWebPartDef);
                                })
                                .AddRandomWikiPage(page =>
                                {
                                    page.AddDefinitionNode(wikiWebPartDef);
                                });
                        })
                        // to publishing pages
                        .AddHostList(BuiltInListDefinitions.Pages, list =>
                        {
                            list
                                .AddRandomPublishingPage(page =>
                                {
                                    page.AddDefinitionNode(publishingPageWebPartDef);
                                });
                        })
                        // to list form
                         .AddRandomList(list =>
                         {
                             list.AddHostWebPartPage(new WebPartPageDefinition
                             {
                                 FileName = "AllItems.aspx",
                                 PageLayoutTemplate = BuiltInWebPartPageTemplates.spstd1,
                                 NeedOverride = false
                             }, page =>
                             {
                                 page.AddDefinitionNode(listFormWebPartDef);
                             });
                         })

                         // to document form
                         .AddRandomDocumentLibrary(list =>
                         {
                             list.AddHostFolder(BuiltInFolderDefinitions.Forms, folder =>
                             {
                                 folder.AddHostWebPartPage(new WebPartPageDefinition
                                 {
                                     FileName = "AllItems.aspx",
                                     PageLayoutTemplate = BuiltInWebPartPageTemplates.spstd1,
                                     NeedOverride = false
                                 }, page =>
                                 {
                                     page.AddDefinitionNode(documentLibraryFormWebPartDef);
                                 });
                             });
                         });
                    ;
                });

            TestModel(model);
        }

        #endregion
    }

}
